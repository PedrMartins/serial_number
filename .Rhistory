Temperature = as.numeric(sub(".*Temperature: ([0-9.]+) oC.*", "\\1", segment)),
Humidity = as.numeric(sub(".*Humidity: ([0-9.]+) % RH.*", "\\1", segment))
)
}
parse_measurements (raw_data)
close (tty)
parse_measurements <- function(segment) {
list(CO2 = as.numeric(sub(".*CO2: ([0-9.]+) ppm.*", "\\1", segment)),
Temperature = as.numeric(sub(".*Temperature: ([0-9.]+) oC.*", "\\1", segment)),
Humidity = as.numeric(sub(".*Humidity: ([0-9.]+) % RH.*", "\\1", segment))
)
}
as.difftime(12, units = "minutes")
as.difftime(12, units = "minute")
as.difftime(12, units = "min")
?as.difftime
as.difftime(12, units = "mins")
#Guardar o tempo inicial
start_time <- Sys.time()
end_time <- start_time + as.difftime(12, units = "mins")  # Limite de 24 horas
end_time
# Loop de leitura por 24 horas
while (Sys.time() < end_time) {
# Ler e parsear os dados da conexão serial
raw_data <- read.serialConnection(tty)  # Ajuste `size` conforme necessário
# Extrair e armazenar cada leitura no data frame
parsed_data <- lapply(raw_data, parse_measurements)
new_data <- as.data.frame(do.call(rbind, parsed_data))  # Converter para data.frame
data_df <- rbind(data_df, new_data)  # Adicionar novas leituras ao data frame principal
# Pausar o loop para evitar leituras excessivas (por exemplo, 10 segundos entre leituras)
Sys.sleep(60)
}
tty <- serialConnection(name = "test",
port = "ttyUSB0")
open (tty)
# Loop de leitura por 24 horas
while (Sys.time() < end_time) {
# Ler e parsear os dados da conexão serial
raw_data <- read.serialConnection(tty)  # Ajuste `size` conforme necessário
# Extrair e armazenar cada leitura no data frame
parsed_data <- lapply(raw_data, parse_measurements)
new_data <- as.data.frame(do.call(rbind, parsed_data))  # Converter para data.frame
data_df <- rbind(data_df, new_data)  # Adicionar novas leituras ao data frame principal
# Pausar o loop para evitar leituras excessivas (por exemplo, 10 segundos entre leituras)
Sys.sleep(60)
}
data_df <- data.frame(CO2 = numeric(),
Temperature = numeric(),
Humidity = numeric(),
stringsAsFactors = FALSE)
# Loop de leitura por 24 horas
while (Sys.time() < end_time) {
# Ler e parsear os dados da conexão serial
raw_data <- read.serialConnection(tty)  # Ajuste `size` conforme necessário
# Extrair e armazenar cada leitura no data frame
parsed_data <- lapply(raw_data, parse_measurements)
new_data <- as.data.frame(do.call(rbind, parsed_data))  # Converter para data.frame
data_df <- rbind(data_df, new_data)  # Adicionar novas leituras ao data frame principal
# Pausar o loop para evitar leituras excessivas (por exemplo, 10 segundos entre leituras)
Sys.sleep(60)
}
colnames (data_dioxC) <- c( "co2_ppm")
data_df
#Guardar o tempo inicial
start_time <- Sys.time()
end_time <- start_time + as.difftime(12, units = "hours")  # Limite de 24 horas
# Loop de leitura por 24 horas
while (Sys.time() < end_time) {
# Ler e parsear os dados da conexão serial
raw_data <- read.serialConnection(tty)  # Ajuste `size` conforme necessário
# Extrair e armazenar cada leitura no data frame
parsed_data <- lapply(raw_data, parse_measurements)
new_data <- as.data.frame(do.call(rbind, parsed_data))  # Converter para data.frame
data_df <- rbind(data_df, new_data)  # Adicionar novas leituras ao data frame principal
# Pausar o loop para evitar leituras excessivas (por exemplo, 10 segundos entre leituras)
Sys.sleep(240)
}
data_df
time_series <- seq.POSIXt(from = start_time,
by = "1 secs", length.out = nrow(data_dioxC))
time_series <- seq.POSIXt(from = start_time,
by = "60 secs",
length.out = nrow(data_df))
time_series
head (data_df)
data_df$timeH <- time_series
data_df
par(bty ="u", bg = "grey99", las =1,
family="serif")
head (data_df)
plot (data_df$CO2~data_df$timeH,
type="p", xlab= "hour",
ylab = expression(CO[2]),
pch="*"
)
data_df$CO2
unlist (data_df)
data.frame (unlist (data_df))
head (data_df)
data_df[,-4]
data_df <- data_df[,-4]
data_dioxC<- data.frame (unlist (data_df))
time_series <- seq.POSIXt(from = start_time,
by = "60 secs",
length.out = nrow(data_dioxC))
data_dioxC$timeH <- time_series
boxplot(data_dioxC)
head(data_dioxC
)
data_dioxC<- data.frame (unlist (data_df[,1]))
head(data_dioxC)
colnames (data_dioxC) <- c( "co2")
data_dioxC$timeH <- time_series
time_series <- seq.POSIXt(from = start_time,
by = "60 secs",
length.out = nrow(data_dioxC))
data_dioxC$timeH <- time_series
head(data_dioxC)
boxplot(data_dioxC)
boxplot(data_dioxC [,1])
par(bty ="u", bg = "grey99", las =1,
family="serif")
plot (data_dioxC$co2~data_dioxC$timeH,
type="p", xlab= "hour",
ylab = expression(CO[2]),
pch="*"
)
par(bty ="n", bg = "grey99", las =1,
family="serif")
plot (data_dioxC$co2~data_dioxC$timeH,
type="p", xlab= "hour",
ylab = expression(CO[2]),
pch="*"
)
time_series <- seq.POSIXt(from = start_time,
by = "1 secs",
length.out = nrow(data_dioxC))
data_dioxC$timeH <- time_series
par(bty ="n", bg = "grey99", las =1,
family="serif")
plot (data_dioxC$co2~data_dioxC$timeH,
type="p", xlab= "hour",
ylab = expression(CO[2]),
pch="*"
)
length(data_dioxC)
length(data_dioxC [,1])
time_series <- seq.POSIXt(from = start_time,
by = "60 mins",
length.out = nrow(data_dioxC))
data_dioxC$timeH <- time_series
par(bty ="n", bg = "grey99", las =1,
family="serif")
plot (data_dioxC$co2~data_dioxC$timeH,
type="p", xlab= "hour",
ylab = expression(CO[2]),
pch="*"
)
time_series <- seq.POSIXt(from = start_time,
by = "60 secs",
length.out = nrow(data_dioxC))
data_dioxC$timeH <- time_series
length(data_dioxC [,1])
par(bty ="n", bg = "grey99", las =1,
family="serif")
plot (data_dioxC$co2~data_dioxC$timeH,
type="p", xlab= "hour",
ylab = expression(CO[2]),
pch="*"
)
end_time <- start_time + as.difftime(12, units = "hours")  # Limite de 24 horas
#Guardar o tempo inicial
start_time <- Sys.time()
end_time <- start_time + as.difftime(12, units = "hours")  # Limite de 24 horas
# Loop de leitura por 24 horas
while (Sys.time() < end_time) {
# Ler e parsear os dados da conexão serial
raw_data <- read.serialConnection(tty)  # Ajuste `size` conforme necessário
# Extrair e armazenar cada leitura no data frame
parsed_data <- lapply(raw_data, parse_measurements)
new_data <- as.data.frame(do.call(rbind, parsed_data))  # Converter para data.frame
data_df <- rbind(data_df, new_data)  # Adicionar novas leituras ao data frame principal
# Pausar o loop para evitar leituras excessivas (por exemplo, 10 segundos entre leituras)
Sys.sleep(240)
}
isOpen(tty)
close(tty)
data_df
head (data_df)
data_dioxC<- data.frame (unlist (data_df[,1]))
head (data_dioxC)
colnames (data_dioxC) <- c( "co2")
head (data_dioxC)
time_series <- seq.POSIXt(from = start_time,
by = "60 secs",
length.out = nrow(data_dioxC))
data_dioxC$timeH <- time_series
par(bty ="n", bg = "grey99", las =1,
family="serif")
plot (data_dioxC$co2~data_dioxC$timeH,
type="p", xlab= "hour",
ylab = expression(CO[2]~"(ppm)"),
pch="*"
)
data_dioxC<- data.frame (unlist (data_df[,2]))
colnames (data_dioxC) <- c( "co2")
time_series <- seq.POSIXt(from = start_time,
by = "60 secs",
length.out = nrow(data_dioxC))
data_dioxC$timeH <- time_series
par(bty ="n", bg = "grey99", las =1,
family="serif")
plot (data_dioxC$co2~data_dioxC$timeH,
type="p", xlab= "hour",
ylab = expression(CO[2]~"(ppm)"),
pch="*"
)
data_dioxC<- data.frame (unlist (data_df[,3]))
colnames (data_dioxC) <- c( "co2")
time_series <- seq.POSIXt(from = start_time,
by = "60 secs",
length.out = nrow(data_dioxC))
par(bty ="n", bg = "grey99", las =1,
family="serif")
plot (data_dioxC$co2~data_dioxC$timeH,
type="p", xlab= "hour",
ylab = expression(CO[2]~"(ppm)"),
pch="*"
)
data_dioxC<- data.frame (unlist (data_df[,3]))
head (data_dioxC)
colnames (data_dioxC) <- c( "co2")
time_series <- seq.POSIXt(from = start_time,
by = "60 secs",
length.out = nrow(data_dioxC))
data_dioxC$timeH <- time_series
par(bty ="n", bg = "grey99", las =1,
family="serif")
plot (data_dioxC$co2~data_dioxC$timeH,
type="p", xlab= "hour",
ylab = expression(CO[2]~"(ppm)"),
pch="*"
)
data_dioxC<- data.frame (unlist (data_df[,1]))
colnames (data_dioxC) <- c( "co2")
time_series <- seq.POSIXt(from = start_time,
by = "60 secs",
length.out = nrow(data_dioxC))
data_dioxC$timeH <- time_series
par(bty ="n", bg = "grey99", las =1,
family="serif")
plot (data_dioxC$co2~data_dioxC$timeH,
type="p", xlab= "hour",
ylab = expression(CO[2]~"(ppm)"),
pch="*"
)
data_dioxC<- data.frame (unlist (data_df[,2]))
colnames (data_dioxC) <- c( "co2")
time_series <- seq.POSIXt(from = start_time,
by = "60 secs",
length.out = nrow(data_dioxC))
par(bty ="n", bg = "grey99", las =1,
family="serif")
plot (data_dioxC$co2~data_dioxC$timeH,
type="p", xlab= "hour",
ylab = "Cº",
pch="*"
)
colnames (data_dioxC) <- c( "co2")
time_series <- seq.POSIXt(from = start_time,
by = "60 secs",
length.out = nrow(data_dioxC))
data_dioxC$timeH <- time_series
plot (data_dioxC$co2~data_dioxC$timeH,
type="p", xlab= "hour",
ylab = "Cº",
pch="*"
)
plot (data_dioxC$co2~data_dioxC$timeH,
type="p", xlab= "hour",
ylab = "ºC",
pch="*"
)
plot (data_dioxC$co2~data_dioxC$timeH,
type="p", xlab= "hour",
ylab = expression(CO[2]~"(ppm)"),
pch="*"
)
data_dioxC<- data.frame (unlist (data_df[,2]))
head (data_df)
data_dioxC<- data.frame (unlist (data_df[,2]))
colnames (data_dioxC) <- c( "co2")
time_series <- seq.POSIXt(from = start_time,
by = "60 secs",
length.out = nrow(data_dioxC))
plot (data_dioxC$co2~data_dioxC$timeH,
type="p", xlab= "hour",
ylab = expression(CO[2]~"(ppm)"),
pch="*"
)
data_dioxC<- data.frame (unlist (data_df[,1]))
head (data_dioxC)
colnames (data_dioxC) <- c( "co2")
time_series <- seq.POSIXt(from = start_time,
by = "60 secs",
length.out = nrow(data_dioxC))
par(bty ="n", bg = "grey99", las =1,
family="serif")
plot (data_dioxC$co2~data_dioxC$timeH,
type="p", xlab= "hour",
ylab = expression(CO[2]~"(ppm)"),
pch="*"
)
data_dioxC$timeH <- time_series
plot (data_dioxC$co2~data_dioxC$timeH,
type="p", xlab= "hour",
ylab = expression(CO[2]~"(ppm)"),
pch="*"
)
start_time
end_time
library(serial)
install.packages("serial")
?install.packages
library(serial)
library (lubridate)
library(readr)
as.difftime(12, units = "weeks")
start_time + as.difftime(12, units = "weeks")
#Guardar o tempo inicial
start_time <- Sys.time()
end_time <- start_time + as.difftime(12, units = "weeks")  # Limite de 24 horas
end_time
when
start_time + as.difftime(12, units = "hours")
parse_measurements <- function(segment) {
list(Pressure = as.numeric(sub(".*Pressure: ([0-9.]+) pa*", "\\1", segment)),
Temperature = as.numeric(sub(".*Temperature: ([0-9.]+) oC.*", "\\1", segment)),
Humidity = as.numeric(sub(".*Humidity: ([0-9.]+) % RH.*", "\\1", segment))
)
}
parse_measurements
library(serial)
library(readr)
library (lubridate)
tty <- serialConnection(name = "Pressure_test",
port = "ttyUSB0")
open (tty)
nBytesInQueue(tty)
# Ler e parsear os dados da conexão serial
raw_data <- read.serialConnection(tty)  # Ajuste `size` conforme necessário
parse_measurements <- function(segment) {
list(Pressure = as.numeric(sub(".*Pressure: ([0-9.]+) ppm.*", "\\1", segment)),
Temperature = as.numeric(sub(".*Temperature: ([0-9.]+) oC.*", "\\1", segment)),
Humidity = as.numeric(sub(".*Humidity: ([0-9.]+) % RH.*", "\\1", segment))
)
}
data_df <- data.frame(Pressure = numeric(),
Temperature = numeric(),
Humidity = numeric(),
stringsAsFactors = FALSE)
# Extrair e armazenar cada leitura no data frame
parsed_data <- lapply(raw_data, parse_measurements)
new_data <- as.data.frame(do.call(rbind, parsed_data))  # Converter para data.frame
data_df <- rbind(data_df, new_data)  # Adicionar novas leituras ao data frame principal
head (data_df)
if (!require("serial")) install.packages("serial", repos = "http://cran.us.r-project.org")
library(serial)
# Function to convert timestamp to POSIXct (UNIX time to human-readable)
convert_timestamp <- function(ts) {
as.POSIXct(as.numeric(ts), origin = "1970-01-01", tz = "UTC")
}
# Open the serial port
port <- serialConnection(
name = "mySerial",
port = "COM3",  # Change this to your actual serial port, e.g., "/dev/ttyUSB0"
mode = "9600,n,8,1",  # Baud rate and settings (adjust if needed)
newline = 1
)
# Open the serial port
port <- serialConnection(
name = "mySerial",
port = "ttyUSB0",  # Change this to your actual serial port, e.g., "/dev/ttyUSB0"
mode = "115200,n,8,1",  # Baud rate and settings (adjust if needed)
newline = 1
)
open(port)
close(tty)
open(port)
# Initialize an empty data frame
data <- data.frame()
cat("Listening for data. Press ESC or Ctrl+C to stop.\n")
# Start reading loop
while (TRUE) {
tryCatch({
line <- read.serialConnection(port)
if (nchar(line) > 0) {
# Remove leading/trailing spaces
line <- trimws(line)
# Parse key-value pairs
parts <- unlist(strsplit(line, ";"))
measurements <- list()
timestamp <- NULL
for (part in parts) {
part <- trimws(part)
if (grepl("^Timestamp:", part)) {
timestamp <- sub("Timestamp:\\s*", "", part)
} else if (grepl(":", part)) {
kv <- unlist(strsplit(part, ":"))
key <- trimws(kv[1])
value <- trimws(kv[2])
measurements[[key]] <- value
}
}
if (!is.null(timestamp)) {
datetime <- convert_timestamp(timestamp)
entry <- data.frame(
Date = as.Date(datetime),
Time = format(datetime, "%H:%M:%S"),
t(measurements),
stringsAsFactors = FALSE
)
data <- rbind(data, entry)
print(entry)
}
}
}, error = function(e) {
cat("Error:", e$message, "\n")
})
}
library(serial)
# Function to convert timestamp to POSIXct (UNIX time to human-readable)
convert_timestamp <- function(ts) {
as.POSIXct(as.numeric(ts), origin = "1970-01-01", tz = "UTC")
}
# Open the serial port
port <- serialConnection(
name = "mySerial",
port = "ttyUSB0",  # Change this to your actual serial port, e.g., "/dev/ttyUSB0"
mode = "115200,n,8,1",  # Baud rate and settings (adjust if needed)
newline = 1
)
open(port)
# Initialize an empty data frame
data <- data.frame()
cat("Listening for data. Press ESC or Ctrl+C to stop.\n")
# Start reading loop
while (TRUE) {
tryCatch({
line <- read.serialConnection(port)
if (nchar(line) > 0) {
# Remove leading/trailing spaces
line <- trimws(line)
# Parse key-value pairs
parts <- unlist(strsplit(line, ";"))
measurements <- list()
timestamp <- NULL
for (part in parts) {
part <- trimws(part)
if (grepl("^Timestamp:", part)) {
timestamp <- sub("Timestamp:\\s*", "", part)
} else if (grepl(":", part)) {
kv <- unlist(strsplit(part, ":"))
key <- trimws(kv[1])
value <- trimws(kv[2])
measurements[[key]] <- value
}
}
if (!is.null(timestamp)) {
datetime <- convert_timestamp(timestamp)
entry <- data.frame(
Date = as.Date(datetime),
Time = format(datetime, "%H:%M:%S"),
t(measurements),
stringsAsFactors = FALSE
)
data <- rbind(data, entry)
print(entry)
}
}
}, error = function(e) {
cat("Error:", e$message, "\n")
})
}
cat("Listening for data. Press ESC or Ctrl+C to stop.\n")
# Close port on exit (in real use you might use on.exit() or an interrupt handler)
close(port)
open(port)
nBytesInQueue(port)
nBytesInQueue(port)
open(port)
nBytesInQueue(port)
# Open the serial port
port <- serialConnection(
name = "mySerial",
port = "ttyUSB0",  # Change this to your actual serial port, e.g., "/dev/ttyUSB0"
mode = "115200,n,8,1",  # Baud rate and settings (adjust if needed)
newline = 1
)
close (port)
open(port)
nBytesInQueue(port)
nBytesInQueue(port)
port <- serialConnection(
name = "mySerial",
port = "ttyUSB0",  # Change this to your actual serial port, e.g., "/dev/ttyUSB0"
mode = "115200,n,8,1",  # Baud rate and settings (adjust if needed)
newline = 0
)
close (port)
open(port)
nBytesInQueue(port)
